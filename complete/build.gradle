//tag::import[]
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
//end::import[]
//tag::buildscript[]
buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.1"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "org.grails.plugins:hibernate5:7.1.0"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.3.4"
        classpath "com.bmuschko:gradle-docker-plugin:3.2.1" // <1>
    }
}
//end::buildscript[]
//tag::versiongroup[]
version "0.1"
group "demo"
//end::versiongroup[]
//tag::apply[]
apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.energizedwork.webdriver-binaries"
apply plugin:"com.energizedwork.idea-project-components"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"com.bmuschko.docker-remote-api" // <1>
//end::apply[]

//tag::repositories[]
repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}
//end::repositories[]
//tag::dependencies[]
dependencies {
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails:grails-logging"
    implementation "org.grails:grails-plugin-rest"
    implementation "org.grails:grails-plugin-databinding"
    implementation "org.grails:grails-plugin-i18n"
    implementation "org.grails:grails-plugin-services"
    implementation "org.grails:grails-plugin-url-mappings"
    implementation "org.grails:grails-plugin-interceptors"
    implementation "org.grails.plugins:cache"
    implementation "org.grails.plugins:async"
    implementation "org.grails.plugins:scaffolding"
    implementation "org.grails.plugins:events"
    implementation "org.grails.plugins:hibernate5"
    implementation "org.hibernate:hibernate-core:5.5.7.Final"
    implementation "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    //tag::postgresql[]
    providedCompile "org.postgresql:postgresql:9.4.1211.jre7"
    //end::postgresql[]
    runtimeOnly "org.glassfish.web:el-impl:2.1.2-b03"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
    runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.3.4"
    testImplementation "org.grails:grails-gorm-testing-support"
    testImplementation "org.grails:grails-web-testing-support"
    testImplementation "org.grails.plugins:geb"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:3.6.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
    testRuntimeOnly "org.seleniumhq.selenium:selenium-api:3.6.0"
}
//end::dependencies[]

//end::bootRun[]
bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
}
//end::bootRun[]

//tag::webdriverBinaries[]
webdriverBinaries {
    chromedriver '2.32'
    geckodriver '0.18.0'
}
//end::webdriverBinaries[]

//tag::test[]
tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}
//end::test[]

//tag::assets[]
assets {
    minifyJs = true
    minifyCss = true
}
//end::assets[]

//tag::pullPostgresImage[]
task pullPostgresImage(type: DockerPullImage) {
    group = 'docker' // <1>
    ext {
        imageName = 'postgres' // <2>
        imageTag = '9.6.6'  // <3>
    }
    description = 'Pull PostgreSQL image'
    repository = imageName
    tag = imageTag
}
//end::pullPostgresImage[]

//tag::createPostgresContainer[]
task createPostgresContainer(type: DockerCreateContainer, dependsOn: pullPostgresImage) {
    group = 'docker'  // <1>
    ext {
        pgContainerName = "demo-postgres" // <4>
        dbName = "demo_db" // <5>
        dbPort = 5432 // <6>
        dbPassword = 'dev_password'  // <7>
    }
    description = 'Creates PostgreSQL container'
    containerName = pgContainerName
    imageId = "${pullPostgresImage.imageName}:${pullPostgresImage.tag}"
    portBindings = ["${dbPort}:5432"]
    env = [
        "POSTGRES_PASSWORD=${dbPassword}",
        "POSTGRES_DB=${dbName}",
    ] as String[]

    onError { e ->
        if (e.class.simpleName in ['BadRequestException', 'ConflictException']) {
            logger.warn 'Container already exists' // <8>
        } else {
            throw e
        }
    }
}
//end::createPostgresContainer[]

//tag::startPostgresContainer[]
task startPostgresContainer(type: DockerStartContainer, dependsOn: createPostgresContainer) {
    group = 'docker' // <1>
    description = 'Starts Postgres container'
    containerId = createPostgresContainer.pgContainerName
    onError { e ->
        if (e.class.simpleName == 'NotModifiedException') {
            logger.warn 'Container already started'  // <8>
        } else {
            throw e
        }
    }
    onComplete {
        logger.info "Postgres is listening on port ${createPostgresContainer.dbPort}"
    }
}
//end::startPostgresContainer[]

//tag::stopPostgresContainer[]
task stopPostgresContainer(type: DockerStopContainer) {
    group = 'docker' // <1>
    description = 'Stops Postgres container'
    containerId = createPostgresContainer.pgContainerName
    onError { e ->
        if (e.class.simpleName == 'NotModifiedException') {
            logger.warn 'Container already stopped' // <8>
        } else {
            throw e
        }
    }
}
//end::stopPostgresContainer[]


tasks.withType(Test) { useJUnitPlatform() }
